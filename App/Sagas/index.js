import { DashboardTypes } from "App/Stores/Dashboard/Actions";
import { OrdersTypes } from "App/Stores/Orders/Actions";
import { ProductTypes } from "App/Stores/Products/Actions";
import { RetailersTypes } from "App/Stores/Retailers/Actions";
import { StartupTypes } from "App/Stores/Startup/Actions";
import { UserTypes } from "App/Stores/User/Actions";
import { VisitsTypes } from "App/Stores/Visits/Actions";
import { networkSaga, offlineActionTypes } from "react-native-offline";
import { all, fork, takeLatest } from "redux-saga/effects";
import { EventTypes } from "App/Stores/Events/Actions";
import { InfluencersTypes } from "App/Stores/Influencers/Actions";
import { SitesTypes } from "App/Stores/Sites/Actions";
import { LocalTypes } from "App/Stores/LocalExpense/Actions";
import { TourTypes } from "../Stores/Tour/Actions";
import { OutstationTypes } from "../Stores/OutstationExpense/Actions";
import { ExpenseTypes } from "../Stores/ExpenseItem/Actions";
import { CommonTypes } from "../Stores/Common/Actions";
import { CompetitorTypes } from "../Stores/Competitor/Actions";
import { DistributorTypes } from "../Stores/Distributor/Actions";
import { ProjectTypes } from "../Stores/Project/Actions";
import { LeadTypes } from "../Stores/Lead/Actions";

import {
  getCounters,
  getEventCount,
  getOrderValue,
  getSiteCount,
  getVisitCount,
  getDashboardSummary,
  getDashboardBanner,
  getTicker,
  getPrimarySummary,
  getSecondarySummary,
  getAllClass,
  getAllBrands,
  getArea,
  getState,
  getSubState,
  getZone,
  getDistrict,
  getCity,
  dashboardOrderFilter,
  getDrs,
} from "./DashboardSaga";

import {
  addParticipants,
  fetchEvents,
  fetchParticipants,
  watchCreateEventRequest,
  watchUpdateEventRequest,
} from "./EventsSaga";

import {
  extractInfluencerInfoData,
  fetchInfluencers,
  watchCreateInfluencerRequest,
  watchUpdateInfluencerRequest,
  fetchInfluencerSites,
} from "./InfluencersSaga";

import { runQueue } from "./OfflineSaga";

import {
  repeatOrder,
  fetchAllOrders,
  fetchOrderDetails,
  fetchDealerOrderDetails,
  getTransport,
  getVariableDiscount,
  getOrderLocation,
  watchSubmitPrimaryOrder,
  getOrderLine,
  fetchSecondaryOrders,
  watchSubmitSecondaryOrder,
  fetchRegularOrders,
  getPartyOrder,
  getOrderCount,
  getSecondaryCount,
  getGoodReturn,
  addPrimaryGoodToCart,
  createPrimaryGood,
  addSecondaryGoodToCart,
  getSecondaryGood,
  createSecondaryGood,
} from "./OrdersSaga";

import {
  getAllProducts,
  fetchProductCategories,
  fetchSchemes,
  getAllProductsBrands,
  fetchProductGsm,
  fetchProductSubSubCategories,
  makeCategoryDisplayList,
  makeSubCategoryDisplayList,
  makeSubSubCategoryDisplayList,
  fetchProductItem,
  fetchProductItemPrice,
  changeOrderDiscount,
  getAllProductsClass,
  addOrderToCart,
  addSecondaryOrderToCart,
  getProductCount,
} from "./ProductSaga";

import {
  extractRetailerInfoData,
  fetchDealers,
  fetchRetailerCompetitors,
  fetchRetailerDealerSearchByLocation,
  fetchRetailerOrders,
  fetchRetailers,
  updateRetailerLocation,
  watchCreateRetailerRequest,
  watchUpdateRetailerRequest,
  fetchDealerOrders,
  fetchDealerInvoice,
  fetchDealerOutstanding,
  fetchInvoiceDetail,
  watchsubmitPaymentsForm,
  fetchDealerPayments,
  createCompetitor,
  fetchDsr,
  fetchDsrArea,
  createDsrArea,
  watchCreateDsrRequest,
  fetchDsrAreaList,
  fetchCreditLimit,
  deleteOrderLine,
  editOrderQuantity,
  addOrderLine,
  getCustomerInfo,
  getCustomerVisit,
  getCustomerInvoice,
  getCustomerComplaint,
  complaintForm,
  getNatureCode,
  getCustomerInvoiceLines,
  getAllLocation,
  getCustomerAddress,
  watchSubmitContactRequest,
  getContact,
  getPincodeInfo,
  getAreaInfo,
  watchSubmitAddressRequest,
  captureCustomerLocation,
  getPayment,
  createPaymentForm,
  updatePayment,
  accountStatus,
  customerStatus,
  customerPffAutomation,
  getLanguage,
} from "./RetailersSaga";

import {
  watchCreateSiteRequest,
  watchUpdateSiteRequest,
  fetchSites,
  fetchSiteProducts,
  watchCreateSiteProductRequest,
  watchUpdateSiteProductRequest,
} from "./SitesSaga";

import { startup } from "./StartupSaga";

import {
  fetchLocalExpenseData,
  fetchLocalItemExpenses,
  fetchTeamItemExpenses,
  fetchTeamExpenses,
  watchUpdateExpenseRequest,
  watchSendForApprovalLocalExpenseRequest,
  watchApproveRejectLocalRequest,
  watchaddRemarkRequest,
  watchUploadLocalImageRequest,
  fetchLocalImage,
} from "./LocalExpenseSaga";

import {
  fetchLocalItem,
  fetchOutstationItem,
  moveOutstationToLocalExpense,
  moveLocalToOutstationExpense,
} from "./ExpenseItemSaga";

import {
  fetchMyOutstationExpenses,
  fetchMyOutstationItemExpenses,
  fetchTeamOutstationExpenses,
  watchUpdateConvenienceExpenseRequest,
  watchUpdateTravelExpenseRequest,
  watchApproveRejectOutstationRequest,
  watchUpdateHotelExpenseRequest,
  fetchApprovedTour,
  watchVisitsByTourRequest,
  watchAddExpenseRequest,
  submitExpenseItem,
  fetchTravelExpenses,
  fetchHotelExpenses,
  fetchFoodExpenses,
  fetchIncidentalExpenses,
  fetchOtherExpenses,
  fetchLocalExpensesType,
  watchUpdateFoodExpenseRequest,
  watchUpdateIncidentalExpenseRequest,
  watchUpdateOtherExpenseRequest,
  watchUpdateLocalExpenseRequest,
  updateLocalExpenseStatus,
  updateEmailStatus,
  watchAddTravelExpenseRequest,
  watchAddHotelExpenseRequest,
  watchAddLocalExpenseRequest,
  watchAddOtherExpenseRequest,
  watchAddIncidentalExpenseRequest,
  watchAddFoodExpenseRequest,
  watchAddConvenienceExpenseRequest,
  fetchConvenienceExpenses,
  watchVisitExpenseItemRequest,
  watchSendForApprovalOutstationExpenseRequest,
  fetchExpenseImage,
} from "./OutstationSaga";

import {
  checkAttendance,
  endDay,
  fetchAgentAreas,
  fetchAgentDetails,
  fetchAllPsm,
  markAbsent,
  watchUserLoginRequest,
  watchUserStartDayRequest,
  watchUserLogoutRequest,
  getProfile,
  loginUserSession,
  logoutUserSession,
  submitResetForm,
  submitGetOtp,
  submitResetOtp,
  userPicUpload,
  ResetPasswordOtp,
  getSubArea,
} from "./UserSaga";

import {
  addItemToCart,
  cancelVisit,
  editCartOrder,
  fetchVisitInfo,
  editVisit,
  endVisit,
  fetchVisitsDisplayList,
  fetchVisitsStorageList,
  getVisitsDisplayList,
  removeItemFromCart,
  startVisit,
  submitSelectedPlannedVisits,
  submitSelectedUnplannedVisit,
  watchAddVisitInfo,
  watchPlaceOrder,
  pressStartVisit,
  pressEndVisit,
  pressEditVisit,
  pressCancelVisit,
  fetchVisitImage,
  watchCompetitorForm,
  watchStockForm,
  getStock,
  watchUpdateStockForm,
  watchUpdateCompetitorForm,
  getParentAreas,
  addBulkVisitsToPlan,
  removeBulkVisitsToPlan,
  createVisitInfo,
  getVisitSummary,
  getVisitHistory,
  updateVisitInfo,
  ChangeNewCompetitorForm,
  watchVisitInfo
} from "./VisitsSaga";

import {
  fetchCities,
  watchCreateTourRequest,
  watchUpdateTourRequest,
  fetchMyTour,
  fetchTeamTour,
  watchSendForApprovalTourRequest,
  watchApproveRejectTourRequest,
} from "./TourSaga";

import {
  fetchAgentAreaPjp,
  fetchObjective,
  uploadImage,
  fetchState,
  fetchCity,
  fetchBeat,
  fetchRetailerArea,
  fetchDealerType,
  fetchTodayAreaPjp,
  fetchDistChannel,
  fetchAllPlant,
  fetchIncoTerm,
  fetchAllRoute,
  fetchAllInsurance,
  getBillParty,
  fetchAllCity,
  fetchCurrentLocation,
  getAllNotifications,
  uploadUserImage,
} from "./CommonSaga";

import {
  getDistributor,
  getAllArea,
  watchCreateDistributorRequest,
  updateDistributor,
  watchSubmitApprovalRequest,
  getSubCategory,
  getAllPincode,
  getAllState,
  getAllSubState,
  getAllZone,
  getAllDistrict,
  getAllCity,
  getResidencePincode,
  getResidenceState,
  getResidenceSubState,
  getResidenceZone,
  getResidenceDistrict,
  getResidenceCity,
  getResidenceArea,
} from "./DistributorSaga";

import {
  createCompetitorForm,
  getClass,
  getCompetitor,
  getCompetitorChild,
  getCompetitorName,
  getCompetitorParent,
  getCompetitorWithDate,
} from "./CompetitorSaga";

import {
  getProject,
  getBathroomMaster,
  updateProject,
  watchCreateProjectRequest,
  getCatalogue,
  getProjectOpportunity,
  getProductSold,
  getProductOffer,
  createProjectProduct,
  getProjectProductSold,
  watchUpdateProjectRequest,
} from "./ProjectSaga";
import { createLeadForm, getLead, updateLead } from "./LeadSaga";

export default function* root() {
  yield all([
    fork(networkSaga, {
      pingInterval: 30000,
    }),
    takeLatest(StartupTypes.STARTUP, startup), // Run the startup saga when the application starts
    takeLatest(offlineActionTypes.CONNECTION_CHANGE, runQueue),

    fork(watchUserLoginRequest),
    fork(watchUserStartDayRequest),
    fork(watchUserLogoutRequest),
    fork(watchVisitInfo),
    takeLatest(UserTypes.LOGIN_USER_SESSION, loginUserSession),
    takeLatest(UserTypes.LOGOUT_USER_SESSION, logoutUserSession),
    takeLatest(UserTypes.FETCH_ALL_AREAS, fetchAgentAreas),
    takeLatest(UserTypes.FETCH_AGENT_DETAILS, fetchAgentDetails),
    takeLatest(UserTypes.END_USER_DAY, endDay),
    takeLatest(UserTypes.MARK_USER_ABSENT, markAbsent),
    takeLatest(UserTypes.CHECK_ATTENDANCE, checkAttendance),
    takeLatest(UserTypes.FETCH_ALL_PSM, fetchAllPsm),
    takeLatest(UserTypes.GET_PROFILE, getProfile),
    // Reset form
    takeLatest(UserTypes.SUBMIT_RESET_FORM, submitResetForm),
    takeLatest(UserTypes.SUBMIT_GET_OTP, submitGetOtp),
    takeLatest(UserTypes.SUBMIT_RESET_OTP, submitResetOtp),
    takeLatest(UserTypes.RESET_PASSWORD_OTP, ResetPasswordOtp),
    takeLatest(UserTypes.USER_PIC_UPLOAD, userPicUpload),
    takeLatest(UserTypes.GET_SUB_AREA, getSubArea),

    //  takeLatest(DistributorTypes.SUBMIT_SELECTED_DISTRIBUTOR_FORM, submitSelectedDistributorForm ),
    // takeLatest(DistributorTypes.SEND_APPROVAL, sendApproval),

    fork(watchSubmitApprovalRequest),

    fork(watchCreateDistributorRequest),
    fork(watchCreateRetailerRequest),
    fork(watchUpdateRetailerRequest),
    fork(watchsubmitPaymentsForm),
    fork(watchCreateDsrRequest),
    takeLatest(RetailersTypes.FETCH_RETAILERS, fetchRetailers),
    takeLatest(RetailersTypes.FETCH_DEALERS, fetchDealers),
    takeLatest(RetailersTypes.FETCH_RETAILER_ORDERS, fetchRetailerOrders),
    takeLatest(RetailersTypes.UPDATE_RETAILER_LOCATION, updateRetailerLocation),
    takeLatest(
      RetailersTypes.FETCH_RETAILER_COMPETITORS,
      fetchRetailerCompetitors
    ),
    takeLatest(
      RetailersTypes.FETCH_RETAILER_DEALER_SEARCH_BY_LOCATION,
      fetchRetailerDealerSearchByLocation
    ),
    takeLatest(
      RetailersTypes.EXTRACT_RETAILER_INFO_DATA,
      extractRetailerInfoData
    ),
    takeLatest(RetailersTypes.FETCH_INVOICE_DETAIL, fetchInvoiceDetail),
    takeLatest(RetailersTypes.FETCH_DEALER_ORDERS, fetchDealerOrders),
    takeLatest(RetailersTypes.FETCH_DEALER_INVOICE, fetchDealerInvoice),
    takeLatest(RetailersTypes.FETCH_DEALER_OUTSTANDING, fetchDealerOutstanding),
    takeLatest(RetailersTypes.FETCH_DEALER_PAYMENTS, fetchDealerPayments),
    takeLatest(RetailersTypes.CREATE_COMPETITOR, createCompetitor),
    takeLatest(RetailersTypes.FETCH_DSR, fetchDsr),
    takeLatest(RetailersTypes.FETCH_DSR_AREA, fetchDsrArea),
    takeLatest(RetailersTypes.FETCH_DSR_AREA_LIST, fetchDsrAreaList),
    takeLatest(RetailersTypes.CREATE_DSR_AREA, createDsrArea),
    takeLatest(RetailersTypes.COMPLAINT_FORM, complaintForm),
    takeLatest(RetailersTypes.GET_NATURE_CODE, getNatureCode),
    takeLatest(RetailersTypes.GET_PAYMENT, getPayment),
    takeLatest(RetailersTypes.GET_LANGUAGE, getLanguage),
    takeLatest(
      RetailersTypes.CAPTURE_CUSTOMER_LOCATION,
      captureCustomerLocation
    ),

    takeLatest(RetailersTypes.FETCH_CREDIT_LIMIT, fetchCreditLimit),
    takeLatest(RetailersTypes.DELETE_ORDER_LINE, deleteOrderLine),
    takeLatest(RetailersTypes.EDIT_ORDER_QUANTITY, editOrderQuantity),
    takeLatest(RetailersTypes.ADD_ORDER_LINE, addOrderLine),
    takeLatest(RetailersTypes.GET_CUSTOMER_INFO, getCustomerInfo),
    takeLatest(RetailersTypes.GET_CUSTOMER_VISIT, getCustomerVisit),
    takeLatest(RetailersTypes.GET_CUSTOMER_INVOICE, getCustomerInvoice),
    takeLatest(
      RetailersTypes.GET_CUSTOMER_INVOICE_LINES,
      getCustomerInvoiceLines
    ),
    takeLatest(RetailersTypes.GET_PINCODE_INFO, getPincodeInfo),
    takeLatest(RetailersTypes.GET_AREA_INFO, getAreaInfo),
    takeLatest(RetailersTypes.GET_CUSTOMER_COMPLAINT, getCustomerComplaint),
    takeLatest(RetailersTypes.GET_CUSTOMER_ADDRESS, getCustomerAddress),
    takeLatest(RetailersTypes.GET_ALL_LOCATION, getAllLocation),
    takeLatest(RetailersTypes.GET_CONTACT, getContact),
    takeLatest(RetailersTypes.CREATE_PAYMENT_FORM, createPaymentForm),
    takeLatest(RetailersTypes.UPDATE_PAYMENT, updatePayment),

    fork(watchSubmitContactRequest),
    fork(watchSubmitAddressRequest),
    fork(watchCreateEventRequest),
    fork(watchUpdateEventRequest),
    takeLatest(EventTypes.FETCH_EVENTS, fetchEvents),
    takeLatest(EventTypes.FETCH_PARTICIPANTS, fetchParticipants),
    takeLatest(EventTypes.ADD_PARTICIPANTS, addParticipants),

    fork(watchCreateSiteRequest),
    fork(watchUpdateSiteRequest),
    fork(watchCreateSiteProductRequest),
    fork(watchUpdateSiteProductRequest),
    takeLatest(SitesTypes.FETCH_SITES, fetchSites),
    takeLatest(SitesTypes.FETCH_SITE_PRODUCTS, fetchSiteProducts),

    fork(watchCreateInfluencerRequest),
    fork(watchUpdateInfluencerRequest),
    takeLatest(InfluencersTypes.FETCH_INFLUENCERS, fetchInfluencers),
    takeLatest(InfluencersTypes.FETCH_INFLUENCER_SITES, fetchInfluencerSites),

    takeLatest(
      InfluencersTypes.EXTRACT_INFLUENCER_INFO_DATA,
      extractInfluencerInfoData
    ),

    fork(watchUpdateExpenseRequest),
    fork(watchSendForApprovalLocalExpenseRequest),
    fork(watchApproveRejectLocalRequest),
    fork(watchUploadLocalImageRequest),
    takeLatest(LocalTypes.FETCH_LOCAL_EXPENSE_DATA, fetchLocalExpenseData),
    takeLatest(LocalTypes.FETCH_LOCAL_ITEM_EXPENSES, fetchLocalItemExpenses),
    takeLatest(LocalTypes.FETCH_TEAM_EXPENSES, fetchTeamExpenses),
    takeLatest(LocalTypes.FETCH_TEAM_ITEM_EXPENSES, fetchTeamItemExpenses),
    takeLatest(LocalTypes.FETCH_LOCAL_IMAGE, fetchLocalImage),

    takeLatest(ExpenseTypes.FETCH_OUTSTATION_ITEM, fetchOutstationItem),
    takeLatest(ExpenseTypes.FETCH_LOCAL_ITEM, fetchLocalItem),
    takeLatest(
      ExpenseTypes.MOVE_LOCAL_TO_OUTSTATION_EXPENSE,
      moveLocalToOutstationExpense
    ),
    takeLatest(
      ExpenseTypes.MOVE_OUTSTATION_TO_LOCAL_EXPENSE,
      moveOutstationToLocalExpense
    ),

    fork(watchUpdateTravelExpenseRequest),
    fork(watchUpdateConvenienceExpenseRequest),
    fork(watchUpdateFoodExpenseRequest),
    fork(watchUpdateIncidentalExpenseRequest),
    fork(watchUpdateOtherExpenseRequest),
    fork(watchUpdateLocalExpenseRequest),
    fork(watchUpdateHotelExpenseRequest),
    fork(watchAddTravelExpenseRequest),
    fork(watchAddConvenienceExpenseRequest),
    fork(watchAddFoodExpenseRequest),
    fork(watchAddExpenseRequest),
    fork(watchAddIncidentalExpenseRequest),
    fork(watchAddOtherExpenseRequest),
    fork(watchAddLocalExpenseRequest),
    fork(watchAddHotelExpenseRequest),
    fork(watchUpdateConvenienceExpenseRequest),
    fork(watchUpdateHotelExpenseRequest),
    fork(watchVisitsByTourRequest),
    fork(watchSendForApprovalOutstationExpenseRequest),
    fork(watchApproveRejectOutstationRequest),
    fork(watchVisitExpenseItemRequest),
    takeLatest(OutstationTypes.SUBMIT_EXPENSE_ITEM, submitExpenseItem),
    takeLatest(
      OutstationTypes.FETCH_MY_OUTSTATION_EXPENSES,
      fetchMyOutstationExpenses
    ),
    takeLatest(
      OutstationTypes.FETCH_MY_OUTSTATION_ITEM_EXPENSES,
      fetchMyOutstationItemExpenses
    ),
    takeLatest(
      OutstationTypes.FETCH_TEAM_OUTSTATION_EXPENSES,
      fetchTeamOutstationExpenses
    ),
    takeLatest(OutstationTypes.FETCH_TRAVEL_EXPENSES, fetchTravelExpenses),
    takeLatest(
      OutstationTypes.FETCH_CONVENIENCE_EXPENSES,
      fetchConvenienceExpenses
    ),
    takeLatest(OutstationTypes.FETCH_HOTEL_EXPENSES, fetchHotelExpenses),
    takeLatest(OutstationTypes.FETCH_FOOD_EXPENSES, fetchFoodExpenses),
    takeLatest(
      OutstationTypes.FETCH_INCIDENTAL_EXPENSES,
      fetchIncidentalExpenses
    ),
    takeLatest(OutstationTypes.FETCH_OTHER_EXPENSES, fetchOtherExpenses),
    takeLatest(OutstationTypes.FETCH_LOCAL_EXPENSES, fetchLocalExpensesType),
    takeLatest(OutstationTypes.FETCH_APPROVED_TOUR, fetchApprovedTour),
    takeLatest(
      OutstationTypes.UPDATE_LOCAL_EXPENSE_STATUS,
      updateLocalExpenseStatus
    ),
    takeLatest(OutstationTypes.UPDATE_EMAIL_STATUS, updateEmailStatus),
    takeLatest(OutstationTypes.FETCH_EXPENSE_IMAGE, fetchExpenseImage),

    fork(watchCreateTourRequest),
    fork(watchUpdateTourRequest),
    fork(watchApproveRejectTourRequest),
    fork(watchSendForApprovalTourRequest),
    takeLatest(TourTypes.FETCH_CITIES, fetchCities),
    takeLatest(TourTypes.FETCH_MY_TOUR, fetchMyTour),
    takeLatest(TourTypes.FETCH_TEAM_TOUR, fetchTeamTour),

    fork(watchPlaceOrder),
    fork(watchAddVisitInfo),
    fork(watchCompetitorForm),
    fork(watchStockForm),
    fork(watchUpdateStockForm),
    fork(watchUpdateCompetitorForm),
    fork(watchSubmitPrimaryOrder),
    fork(watchSubmitSecondaryOrder),
    fork(watchCreateProjectRequest),
    fork(watchUpdateProjectRequest),
    takeLatest(VisitsTypes.FETCH_VISITS_STORAGE_LIST, fetchVisitsStorageList),
    takeLatest(VisitsTypes.FETCH_VISITS_DISPLAY_LIST, fetchVisitsDisplayList),
    takeLatest(VisitsTypes.GET_VISITS_DISPLAY_LIST, getVisitsDisplayList),
    takeLatest(
      VisitsTypes.SUBMIT_SELECTED_PLANNED_VISITS,
      submitSelectedPlannedVisits
    ),
    takeLatest(
      VisitsTypes.SUBMIT_SELECTED_UNPLANNED_VISIT,
      submitSelectedUnplannedVisit
    ),
    // takeLatest(VisitsTypes.CREATE_VISIT_INFO, createVisitInfo),
    takeLatest(VisitsTypes.CANCEL_VISIT, cancelVisit),
    takeLatest(VisitsTypes.EDIT_VISIT, editVisit),
    takeLatest(VisitsTypes.ADD_ITEM_TO_CART, addItemToCart),
    takeLatest(VisitsTypes.REMOVE_ITEM_FROM_CART, removeItemFromCart),
    takeLatest(VisitsTypes.CHANGE_NEW_COMPETITOR_FORM, ChangeNewCompetitorForm),
    takeLatest(VisitsTypes.EDIT_CART_ORDER, editCartOrder),
    takeLatest(VisitsTypes.START_VISIT, startVisit),
    takeLatest(VisitsTypes.END_VISIT, endVisit),
    takeLatest(VisitsTypes.PRESS_START_VISIT, pressStartVisit),
    takeLatest(VisitsTypes.PRESS_END_VISIT, pressEndVisit),
    takeLatest(VisitsTypes.PRESS_EDIT_VISIT, pressEditVisit),
    takeLatest(VisitsTypes.PRESS_CANCEL_VISIT, pressCancelVisit),
    takeLatest(VisitsTypes.FETCH_VISIT_INFO, fetchVisitInfo),
    takeLatest(VisitsTypes.GET_VISIT_SUMMARY, getVisitSummary),
    takeLatest(VisitsTypes.GET_VISIT_HISTORY, getVisitHistory),
    takeLatest(VisitsTypes.UPDATE_VISIT_INFO, updateVisitInfo),
    takeLatest(VisitsTypes.FETCH_VISIT_IMAGE, fetchVisitImage),
    takeLatest(VisitsTypes.GET_STOCK, getStock),
    takeLatest(VisitsTypes.GET_PARENT_AREAS, getParentAreas),
    takeLatest(VisitsTypes.ADD_BULK_VISITS_TO_PLAN, addBulkVisitsToPlan),
    takeLatest(VisitsTypes.REMOVE_BULK_VISITS_TO_PLAN, removeBulkVisitsToPlan),
    takeLatest(ProductTypes.ADD_ORDER_TO_CART, addOrderToCart),
    takeLatest(
      ProductTypes.ADD_SECONDARY_ORDER_TO_CART,
      addSecondaryOrderToCart
    ),
    takeLatest(ProductTypes.GET_ALL_PRODUCTS_BRANDS, getAllProductsBrands),
    takeLatest(ProductTypes.GET_ALL_PRODUCTS_CLASS, getAllProductsClass),
    takeLatest(ProductTypes.FETCH_SCHEMES, fetchSchemes),
    takeLatest(ProductTypes.GET_ALL_PRODUCTS, getAllProducts),
    takeLatest(ProductTypes.GET_PRODUCT_COUNT, getProductCount),
    takeLatest(ProductTypes.FETCH_PRODUCT_CATEGORIES, fetchProductCategories),
    //takeLatest(ProductTypes.FETCH_PRODUCT_CATEGORIES, fetchProductCategories),
    takeLatest(ProductTypes.FETCH_PRODUCT_GSM, fetchProductGsm),
    takeLatest(
      ProductTypes.FETCH_PRODUCT_SUB_SUB_CATEGORIES,
      fetchProductSubSubCategories
    ),
    takeLatest(
      ProductTypes.MAKE_CATEGORY_DISPLAY_LIST,
      makeCategoryDisplayList
    ),
    takeLatest(
      ProductTypes.MAKE_SUB_CATEGORY_DISPLAY_LIST,
      makeSubCategoryDisplayList
    ),
    takeLatest(
      ProductTypes.MAKE_SUB_SUB_CATEGORY_DISPLAY_LIST,
      makeSubSubCategoryDisplayList
    ),
    takeLatest(ProductTypes.FETCH_PRODUCT_ITEM, fetchProductItem),
    takeLatest(ProductTypes.FETCH_PRODUCT_ITEM_PRICE, fetchProductItemPrice),
    takeLatest(ProductTypes.CHANGE_ORDER_DISCOUNT, changeOrderDiscount),
    takeLatest(OrdersTypes.ADD_PRIMARY_GOOD_TO_CART, addPrimaryGoodToCart),
    takeLatest(OrdersTypes.ADD_SECONDARY_GOOD_TO_CART, addSecondaryGoodToCart),
    takeLatest(OrdersTypes.FETCH_ALL_ORDERS, fetchAllOrders),
    takeLatest(OrdersTypes.CREATE_PRIMARY_GOOD, createPrimaryGood),
    takeLatest(OrdersTypes.CREATE_SECONDARY_GOOD, createSecondaryGood),
    takeLatest(OrdersTypes.GET_ORDER_COUNT, getOrderCount),
    takeLatest(OrdersTypes.GET_SECONDARY_COUNT, getSecondaryCount),
    takeLatest(OrdersTypes.FETCH_ORDER_DETAILS, fetchOrderDetails),
    takeLatest(OrdersTypes.FETCH_DEALER_ORDER_DETAILS, fetchDealerOrderDetails),
    takeLatest(OrdersTypes.REPEAT_ORDER, repeatOrder),
    takeLatest(OrdersTypes.GET_TRANSPORT, getTransport),
    takeLatest(OrdersTypes.GET_VARIABLE_DISCOUNT, getVariableDiscount),
    takeLatest(OrdersTypes.FETCH_SECONDARY_ORDERS, fetchSecondaryOrders),
    takeLatest(OrdersTypes.FETCH_REGULAR_ORDERS, fetchRegularOrders),
    takeLatest(OrdersTypes.GET_PARTY_ORDER, getPartyOrder),
    takeLatest(OrdersTypes.GET_GOOD_RETURN, getGoodReturn),
    takeLatest(OrdersTypes.GET_SECONDARY_GOOD, getSecondaryGood),
    takeLatest(OrdersTypes.GET_ORDER_LOCATION, getOrderLocation),
    takeLatest(OrdersTypes.GET_ORDER_LINE, getOrderLine),
    takeLatest(CommonTypes.FETCH_ALL_AREA_PJP, fetchAgentAreaPjp),
    takeLatest(CommonTypes.FETCH_OBJECTIVE, fetchObjective),
    takeLatest(CommonTypes.FETCH_STATE, fetchState),
    takeLatest(CommonTypes.FETCH_CITY, fetchCity),
    takeLatest(CommonTypes.UPLOAD_IMAGE, uploadImage),
    takeLatest(CommonTypes.FETCH_BEAT, fetchBeat),
    takeLatest(CommonTypes.FETCH_DIST_CHANNEL, fetchDistChannel),
    takeLatest(CommonTypes.FETCH_ALL_PLANT, fetchAllPlant),
    takeLatest(CommonTypes.FETCH_ALL_INSURANCE, fetchAllInsurance),
    takeLatest(CommonTypes.FETCH_ALL_ROUTE, fetchAllRoute),
    takeLatest(CommonTypes.FETCH_INCO_TERM, fetchIncoTerm),
    takeLatest(CommonTypes.FETCH_RETAILER_AREA, fetchRetailerArea),
    takeLatest(CommonTypes.FETCH_DEALER_TYPE, fetchDealerType),
    takeLatest(CommonTypes.FETCH_TODAY_AREA_PJP, fetchTodayAreaPjp),
    takeLatest(CommonTypes.GET_BILL_PARTY, getBillParty),
    takeLatest(CommonTypes.FETCH_ALL_CITY, fetchAllCity),
    takeLatest(CommonTypes.FETCH_CURRENT_LOCATION, fetchCurrentLocation),
    takeLatest(CommonTypes.GET_ALL_NOTIFICATIONS, getAllNotifications),
    takeLatest(CommonTypes.UPLOAD_USER_IMAGE, uploadUserImage),
    takeLatest(DashboardTypes.GET_ORDER_VALUE, getOrderValue),
    takeLatest(DashboardTypes.GET_VISIT_COUNT, getVisitCount),
    takeLatest(DashboardTypes.GET_SITE_COUNT, getSiteCount),
    takeLatest(DashboardTypes.GET_COUNTERS, getCounters),
    takeLatest(DashboardTypes.GET_EVENT_COUNT, getEventCount),
    takeLatest(DashboardTypes.GET_DASHBOARD_SUMMARY, getDashboardSummary),
    takeLatest(DashboardTypes.GET_DASHBOARD_BANNER, getDashboardBanner),
    takeLatest(DashboardTypes.GET_TICKER, getTicker),
    takeLatest(DashboardTypes.GET_PRIMARY_SUMMARY, getPrimarySummary),
    takeLatest(DashboardTypes.GET_SECONDARY_SUMMARY, getSecondarySummary),
    takeLatest(DashboardTypes.GET_AREA, getArea),
    takeLatest(DashboardTypes.GET_STATE, getState),
    takeLatest(DashboardTypes.GET_SUB_STATE, getSubState),
    takeLatest(DashboardTypes.GET_ZONE, getZone),
    takeLatest(DashboardTypes.GET_DISTRICT, getDistrict),
    takeLatest(DashboardTypes.GET_CITY, getCity),
    takeLatest(DashboardTypes.GET_ALL_CLASS, getAllClass),
    takeLatest(DashboardTypes.GET_ALL_BRANDS, getAllBrands),
    takeLatest(DashboardTypes.DASHBOARD_ORDER_FILTER, dashboardOrderFilter),
    takeLatest(DistributorTypes.GET_DISTRIBUTOR, getDistributor),
    takeLatest(DistributorTypes.GET_ALL_AREA, getAllArea),
    takeLatest(DistributorTypes.GET_ALL_PINCODE, getAllPincode),
    takeLatest(DistributorTypes.GET_ALL_STATE, getAllState),
    takeLatest(DistributorTypes.GET_ALL_SUB_STATE, getAllSubState),
    takeLatest(DistributorTypes.GET_ALL_ZONE, getAllZone),
    takeLatest(DistributorTypes.GET_ALL_DISTRICT, getAllDistrict),
    takeLatest(DistributorTypes.GET_ALL_CITY, getAllCity),
    takeLatest(DashboardTypes.GET_DRS, getDrs),

    takeLatest(DistributorTypes.GET_RESIDENCE_AREA, getResidenceArea),
    takeLatest(DistributorTypes.GET_RESIDENCE_PINCODE, getResidencePincode),
    takeLatest(DistributorTypes.GET_RESIDENCE_STATE, getResidenceState),
    takeLatest(DistributorTypes.GET_RESIDENCE_SUB_STATE, getResidenceSubState),
    takeLatest(DistributorTypes.GET_RESIDENCE_ZONE, getResidenceZone),
    takeLatest(DistributorTypes.GET_RESIDENCE_DISTRICT, getResidenceDistrict),
    takeLatest(DistributorTypes.GET_RESIDENCE_CITY, getResidenceCity),
    takeLatest(DistributorTypes.GET_SUB_CATEGORY, getSubCategory),
    takeLatest(DistributorTypes.UPDATE_DISTRIBUTOR, updateDistributor),
    takeLatest(CompetitorTypes.CREATE_COMPETITOR_FORM, createCompetitorForm),
    takeLatest(CompetitorTypes.GET_COMPETITOR_NAME, getCompetitorName),
    takeLatest(CompetitorTypes.GET_COMPETITOR, getCompetitor),
    takeLatest(CompetitorTypes.GET_COMPETITOR_WITH_DATE, getCompetitorWithDate),
    takeLatest(CompetitorTypes.GET_CLASS, getClass),
    takeLatest(CompetitorTypes.GET_COMPETITOR_PARENT, getCompetitorParent),
    takeLatest(CompetitorTypes.GET_COMPETITOR_CHILD, getCompetitorChild),
    takeLatest(RetailersTypes.ACCOUNT_STATUS, accountStatus),
    takeLatest(RetailersTypes.CUSTOMER_STATUS, customerStatus),
    takeLatest(RetailersTypes.CUSTOMER_PFF_AUTOMATION, customerPffAutomation),
    takeLatest(ProjectTypes.GET_PROJECT, getProject),
    takeLatest(ProjectTypes.GET_BATHROOM_MASTER, getBathroomMaster),
    // takeLatest(ProjectTypes.UPDATE_PROJECT, updateProject),
    takeLatest(LeadTypes.GET_LEAD, getLead),
    takeLatest(LeadTypes.CREATE_LEAD_FORM, createLeadForm),
    takeLatest(LeadTypes.UPDATE_LEAD, updateLead),
    takeLatest(ProjectTypes.GET_CATALOGUE, getCatalogue),
    takeLatest(ProjectTypes.GET_PROJECT_OPPORTUNITY, getProjectOpportunity),
    takeLatest(ProjectTypes.GET_PRODUCT_SOLD, getProductSold),
    takeLatest(ProjectTypes.GET_PROJECT_PRODUCT_SOLD, getProjectProductSold),
    takeLatest(ProjectTypes.GET_PRODUCT_OFFER, getProductOffer),
    takeLatest(ProjectTypes.CREATE_PROJECT_PRODUCT, createProjectProduct),
  ]);
}
